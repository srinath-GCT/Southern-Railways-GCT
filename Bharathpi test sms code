#define TINY_GSM_MODEM_SIM7600 //TINY_GSM_MODEM compatible for 7672 as well
#define TINY_GSM_RX_BUFFER 1024

#define TINY_GSM_TEST_SMS true

#define SMS_TARGET1  "7339588322" //Enter you phone number to which you would like to recevied SMS
//#define SMS_TARGET2  "xxxxxxxxxx" //Enter you phone number to which you would like to recevied SMS
//#define SMS_TARGET3  "xxxxxxxxxx" //Enter you phone number to which you would like to recevied SMS

#define SerialAT Serial1
#define SerialMon Serial

#define GSM_PIN "" //In case if you have a password protection for your simcard

const char apn[]  = "www";
const char gprsUser[] = "";
const char gprsPass[] = "";

String send_data_to_url = "https://eogas6eaag50nu2.m.pipedream.net";
String gpsLatLong = ""; //Get gps lat long 

int timeout = 60; //GPS latch timeout duration. You can increase this value based on your application/need.

#include <TinyGsmClient.h> //Library version compatible 0.12.0
#include <SPI.h> //ESP32 SPI Lib version - 2.0.16
#include <ArduinoJson.h> //Lib version - 7.0.3
#include <Ticker.h> //Lib version - 4.4.0

StaticJsonDocument<200> payloadObj; //for testing http request

#ifdef DUMP_AT_COMMANDS
  #include <StreamDebugger.h>
  StreamDebugger debugger(SerialAT, SerialMon);
  TinyGsm modem(debugger);
#else
  TinyGsm modem(SerialAT);
#endif

#define UART_BAUD   115200
#define PIN_DTR     25
#define PIN_TX      17
#define PIN_RX      16
#define PWR_PIN     26  //If you are using Bharat Pi 4G LTE V2 board then change this pin # to 32

//Onboard LED (BLUE COLOR) in on PIN #2
#define LED_PIN 2

void modemPowerOn(){
  pinMode(PWR_PIN, OUTPUT);
  digitalWrite(PWR_PIN, LOW);
  delay(1000);
  digitalWrite(PWR_PIN, HIGH);
}

void modemPowerOff(){
  pinMode(PWR_PIN, OUTPUT);
  digitalWrite(PWR_PIN, LOW);
  delay(1500);
  digitalWrite(PWR_PIN, HIGH);
}

void modemRestart(){
  modemPowerOff();
  delay(1000);
  modemPowerOn();
}

void setup(){
  // Set console baud rate
  SerialMon.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  delay(5000);

  modemPowerOn();
  SerialAT.begin(UART_BAUD, SERIAL_8N1, PIN_RX, PIN_TX);
  Serial.clearWriteError();
  Serial.println();
  Serial.println();
  Serial.println("/**********************************************************/");
  Serial.println("  EDGEHAX 4G/LTE Module A7672S Sample Program");
  Serial.println("  To initialize the network test, please make sure the antenna has been");
  Serial.println("  connected and SIM card is inserted in the SIM slot (back side of the board).");
  Serial.println("/**********************************************************/\n\n");

  delay(5000);

  String res;
  Serial.println("Initializing Modem...");

  if (!modem.init()) {
    digitalWrite(LED_PIN, HIGH);
    modemRestart();
    delay(2000);
    Serial.println("Failed to restart modem, attempting to continue without restarting");
    digitalWrite(LED_PIN, LOW);
    Serial.println("Continuing without modem init for now...");
    //return;
  }

  digitalWrite(LED_PIN, LOW); 

  Serial.println("Running SIMCOMATI command...");
  modem.sendAT("+SIMCOMATI"); //Get the module information
  modem.waitResponse(1000L, res);
  res.replace("\r\nOK\r\n", "");
  Serial.println(res);
  res = "";
  Serial.println();

  Serial.println("Preferred mode selection (GSM/LTE)...");
  modem.sendAT("+CNMP?");
  if (modem.waitResponse(1000L, res) == 1) {
    res.replace("\r\nOK\r\n", "");
    Serial.println(res);
  }
  res = "";
  Serial.println();

  Serial.println("Preferred selection between CAT-M and NB-IoT...");
  modem.sendAT("+CMNB?");
  if (modem.waitResponse(1000L, res) == 1) {
    res.replace("\r\nOK\r\n", "");
    Serial.println(res);
  }
  res = "";
  Serial.println();

  String modemName = modem.getModemName();
  Serial.println("Modem Name : " + modemName);
  delay(1000);

  String modemInfo = modem.getModemInfo();
  Serial.println("Modem Info : " + modemInfo);
  delay(1000);

  String payload;
  payloadObj["edgehax_4g_module_testing"] = modemName;
  payloadObj["modemInfo"] = modemInfo;
  serializeJson(payloadObj, payload);

  if ( GSM_PIN && modem.getSimStatus() != 3 ) {
    modem.simUnlock(GSM_PIN);
  }

  Serial.println("Network mode connectivity testing (GSM, LTE or GSM/LTE)...");

  for (int i = 0; i <= 4; i++) {
    uint8_t network[] = {
        2,  /*Automatic*/
        13, /*GSM only*/
        38, /*LTE only*/
        51  /*GSM and LTE only*/
    };
    Serial.printf("Try %d method\n", network[i]);
    modem.setNetworkMode(network[i]);
    delay(3000);
    bool isConnected = false;
    int tryCount = 60;
    while (tryCount--) {
      String netoworkOerator = modem.getOperator();
      Serial.print("Operator: ");
      Serial.println(netoworkOerator);
      int16_t signal =  modem.getSignalQuality();
      Serial.print("Signal: ");
      Serial.println(signal);
      Serial.print("isNetworkConnected: ");
      isConnected = modem.isNetworkConnected();
      Serial.println( isConnected ? "CONNECTED" : "NOT CONNECTED YET");
      if (isConnected) {
        break;
      }
      delay(1000);
      digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    }
    if (isConnected) {
        break;
    }
  }
  digitalWrite(LED_PIN, HIGH);

  Serial.println();
  Serial.println("Yehhh....Device is connected to Sim network.");
  Serial.println();

  delay(1000);
  Serial.println("Checking UE (User Equipment) system information...");
  Serial.println();
  modem.sendAT("+CPSI?");
  if (modem.waitResponse(1000L, res) == 1) {
    res.replace("\r\nOK\r\n", "");
    Serial.println(res);
  }

  delay(1000);  
  Serial.println("");
  Serial.println("");  

  if(modem.isNetworkConnected()){
    Serial.println("Mobile Network is connected.......");
  }  

  if (modem.isGprsConnected()) { 
    Serial.println("");
    Serial.println("GPRS network is connected");
  }
  Serial.println("");
  Serial.println("");

  Serial.println();

  delay(2000);
  Serial.println("Testing a sample HTTPS Call to Pipedream server...");
  Serial.println("NOTE: Please ensure to deploy an end point on Pipedream (pipedream.com) to test. Example: " + send_data_to_url);
  Serial.println();
  Serial.println();
  Serial.println("MODEM TESTING IN PROGRESS....");
  Serial.println();
  delay(5000);
  Serial.println("Initiating HTTP");
  modem.sendAT("+HTTPINIT");
  if (modem.waitResponse(10000L) != 1) {
    Serial.println("ERROR: HTTP INIT FAILED!");
    DBG("+HTTPINIT");
  }
  delay(5000);
  Serial.print("Paylog length: ");
  Serial.println(payload.length());
  Serial.println("Setting http call back URL");

  modem.sendAT("+HTTPPARA=\"URL\"," + send_data_to_url);
  if (modem.waitResponse(10000L) != 1) {
    Serial.println("ERROR: HTTP URL SETTING FAILED!");
    DBG("+HTTPPARA=\"URL\"," + send_data_to_url);
  }
  modem.sendAT("+HTTPPARA=\"CONTENT\",\"text/plain\"");
  if (modem.waitResponse(10000L) != 1) {
    Serial.println("ERROR: HTTP CONTENT TYPE SETTING FAILED");
    DBG("+HTTPPARA=\"CONTENT\",\"text/plain\"");
  }
  modem.sendAT("+HTTPDATA=" + String(payload.length()) + ",20000");
  while (modem.waitResponse(1000UL, "DOWNLOAD") != 1) {
      Serial.print(".");
  }
  delay(2000);

  modem.streamWrite(payload); 
  if (modem.waitResponse(10000L) != 1) {
    Serial.println("ERROR: SENDING POST DATA");
  }
  delay(2000);
  Serial.println("Executing POST call");
  modem.sendAT("+HTTPACTION=1");
  if (modem.waitResponse(1000UL) != 1) {
    Serial.println("ERROR: HTTP POST CALL FAILED!");
    DBG("+HTTPACTION=1");
  } else {
    Serial.print("Data sent to API: ");
    Serial.println(payload);    
    Serial.print("Post call response:");
    delay(2000);
    modem.sendAT("+HTTPHEAD");
    delay(2000);
    Serial.println();
    Serial.println("Terminating HTTP");
    modem.sendAT("+HTTPTERM");
    delay(2000);
  }

  Serial.println("Sending Test SMS to number(s):");
  Serial.println(SMS_TARGET1);
  
  #if TINY_GSM_TEST_SMS && defined TINY_GSM_MODEM_HAS_SMS && defined SMS_TARGET1 
    Serial.print("Sending SMS... please wait ");
    res = modem.sendSMS(SMS_TARGET1, String(modemInfo));
    Serial.print("Send SMS returned: ");
    Serial.println(res);
    DBG("SMS sent status:", res ? "SUCCESS" : "FAILED");
    delay(2000);
  #endif

  Serial.println("END OF MODEM TESTING");

  if(modemName == "A7672S-LASC"){
    Serial.println("Modem doesnt support GPS/GNSS, so no need of GPS testing.");
    return;
  } else if (modemName == "A7672S-FASE"){
    Serial.println("GPS/GNSS is supported!");
    Serial.println("Powering on GPS/GNSS...");
    modem.sendAT("+CGNSSPWR=1");
    while (modem.waitResponse(1000UL, "+CGNSSPWR: READY!") != 1) {
      Serial.print(".");
    }
    Serial.println("GPS/GNSS Power ON READY!");
    Serial.println("Switching GPS/GNSS Port");
    modem.sendAT("+CGNSSPORTSWITCH=1,1");
    while (modem.waitResponse(1000UL, "OK") != 1) {
      Serial.print(".");
    }
    Serial.println("GPS/GNSS port switch success");
    Serial.println("Enabling Assisted GPS");
    modem.sendAT("+CAGPS");
    while (modem.waitResponse(1000UL, "+AGPS: success.") != 1) {
      Serial.print(".");
    }
    Serial.println("GNSS assisted GPS success");
    Serial.println("Fetching GPS co-ordinates...");
    modem.sendAT("+CGNSSINFO");
    modem.waitResponse(1000UL, gpsLatLong);
    Serial.print("CGPS INFO: ");
    Serial.println(gpsLatLong);
    Serial.println("Awaiting for GPS latch: ");
    
    for(timeout=30; timeout != 0; timeout--){
      modem.sendAT("+CGNSSINFO");
      modem.waitResponse(1000UL, gpsLatLong);
      if(gpsLatLong.indexOf("+CGNSSINFO: ,,,,,,,,") > 0){
        Serial.print(".");
        Serial.print(timeout);
      } else{
        Serial.print("**** GPS Latched ****");
        modem.sendAT("+CGNSSINFO");
        modem.waitResponse(1000UL, gpsLatLong);
        Serial.println(gpsLatLong);
        return;
      }
      delay(1000);
    }
    if(timeout == 0){
      Serial.println(">>>>> TIME OUT: GPS Latch timedout. <<<<<<");
    }    
    Serial.println("GPS testing ended.");
  } else {
    Serial.println("######### Could not find SIMCOM A7672S Module! ##########");
  }
  Serial.println(">>>>> End of 4G Module Testing <<<<<<");
}

void loop(){


  while (1) {
    while (SerialAT.available()) {
      SerialMon.write(SerialAT.read());
    }
    while (SerialMon.available()) {
      SerialAT.write(SerialMon.read());
    }
  }    
}
